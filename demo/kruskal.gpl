edge[] edge_merge_sort(edge[] lst)
{
	if (lst.len() <= 1)
		return lst;
	int size_left = lst.len() / 2;
	int size_right = lst.len() - size_left;
	edge[size_left] left;
	edge[size_right] right;
	int i;
	for (i = 0; i < size_left; i+=1)
		left[i] = lst[i];
	for (i = size_left; i < lst.len(); i+=1)
		right[i-size_left] = lst[i];
	return edge_merge(edge_merge_sort(left), edge_merge_sort(right));
}

edge[] edge_merge(edge[] left, edge[] right)
{
	int i = 0;
	int j = 0;
	int k = 0;
	edge[left.len() + right.len()] res;
	while (i < left.len() && j < right.len())
		if (left[i].getWeight() >= right[j].getWeight())
		{
			res[k] = right[j];
			k += 1;
			j += 1;
		} else
		{
			res[k] = left[i];
			k += 1;
			i += 1;
		}
	if (i == left.len())
		for (; k < res.len(); k+=1)
		{
			res[k] = right[j];
			j += 1;
		}
	if (j == right.len())
		for (; k < res.len(); k+=1)
		{
			res[k] = left[i];
			i += 1;
		}
	return res;
}

void make_set(int[] rank, int[] paren)
{
	int i;
	for (i = 0; i < rank.len(); i+=1)
		paren[i] = i;
}

void link(int x, int y, int[] rank, int[] paren)
{
	if (rank[x] > rank[y])
		paren[y] = x;
	else
	{
		paren[x] = y;
		if (rank[x] == rank[y])
			rank[y] = rank[y] + 1;
	}
}

int find_set(int x, int[] rank, int[] paren)
{
	if (x != paren[x])
	{
		paren[x] = find_set(paren[x], rank, paren);
		return paren[x];
	}
	return x;
}

void union(int x, int y, int[] rank, int[] paren)
{
	link(find_set(x, rank, paren), find_set(y, rank, paren), rank, paren);
}

edge[] run_kruskal(graph g)
{
	edge[] sorted_edges = edge_merge_sort(g.getAllEdges());
	edge[g.getNodeCount()-1] spanning;
	int[g.getNodeCount()] rank;
	int[g.getNodeCount()] paren;
	make_set(rank, paren);
	int i;
	int accu = -1;
	int k;
	for (i = 0; i < sorted_edges.len(); i+=1) 
	{
		if (find_set(sorted_edges[i].getSrc().getID(), rank, paren) != find_set(sorted_edges[i].getDst().getID(), rank, paren))
		{
			union(sorted_edges[i].getSrc().getID(), sorted_edges[i].getDst().getID(), rank, paren);
			accu += 1;
			spanning[accu] = sorted_edges[i];
		}
	}
	return spanning;
}


void main()
{
	graph g = 
	[
		A -(12)> D -(16)> F -(42)> H -(3)> G -(11)> E -(12)> C -(17)> B -(5)> A;
		A -(15)> C -(1)> D -(19)> B;
		D -(5)> E -(10)> F -(7)> G;
		D -(7)> H;
	];
	edge[] spanning = run_kruskal(g);
	int i;
	for (i = 0; i < spanning.len(); i+=1) {
		print(spanning[i].getSrc());
		print(spanning[i].getDst());
		print(spanning[i].getWeight());
		print("");
	}
}